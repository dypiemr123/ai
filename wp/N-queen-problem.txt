def solve_n_queens(n):
    # Check if the queen can be placed at (row, col)
    def is_safe(queens, row, col):
        for r in range(row):
            c = queens[r]
            if c == col or abs(c - col) == abs(r - row):  # Same column or diagonal
                return False
        return True

    # Recursive function to place queens
    def solve(row, queens):
        if row == n:  # All queens placed
            solutions.append(queens[:])
            return
        for col in range(n):
            if is_safe(queens, row, col):
                queens[row] = col
                solve(row + 1, queens)  # Move to next row

    solutions = []
    solve(0, [-1] * n)

    # Formatting solutions into chessboard format
    for solution in solutions:
        for i in range(n):
            row = ['.'] * n
            row[solution[i]] = 'Q'
            print(''.join(row))
        print()

# Take input from the user
n = int(input("Enter the value of N (for N-Queens): "))
solve_n_queens(n)