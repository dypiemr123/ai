import sys

# Selection Sort Implementation
def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_index = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr

# Kruskal's Algorithm Implementation
class DisjointSet:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])
        return self.parent[u]

    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        if root_u != root_v:
            if self.rank[root_u] > self.rank[root_v]:
                self.parent[root_v] = root_u
            elif self.rank[root_u] < self.rank[root_v]:
                self.parent[root_u] = root_v
            else:
                self.parent[root_v] = root_u
                self.rank[root_u] += 1

def kruskal(n, edges):
    edges = sorted(edges, key=lambda edge: edge[2])
    ds = DisjointSet(n)
    mst = []

    for u, v, weight in edges:
        if ds.find(u) != ds.find(v):
            mst.append((u, v, weight))
            ds.union(u, v)
    return mst

# Main Program
def main():
    # Static input for Selection Sort
    arr = [64, 25, 12, 22, 11]
    print("Original Array:", arr)
    sorted_arr = selection_sort(arr)
    print("Sorted Array:", sorted_arr)

    # Static input for Kruskal's Algorithm
    n = 4  # Number of nodes
    edges = [
        (0, 1, 10),
        (0, 2, 6),
        (0, 3, 5),
        (1, 3, 15),
        (2, 3, 4)
    ]
    mst = kruskal(n, edges)
    print("Minimum Spanning Tree (Kruskal's):", mst)

if __name__ == "__main__":
    main()
