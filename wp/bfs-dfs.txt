
from collections import defaultdict, deque

# Graph class to store nodes and connections
class Graph:
    def __init__(self):
        self.graph = defaultdict(list)  # Adjacency list

    # Function to add an edge to the graph
    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)  # For undirected graph

    # DFS function with preorder and postorder
    def dfs(self, start_node, visited=None, preorder_list=None, postorder_list=None):
        if visited is None:
            visited = set()
        if preorder_list is None:
            preorder_list = []
        if postorder_list is None:
            postorder_list = []

        visited.add(start_node)
        preorder_list.append(start_node)  # Preorder action
        print(start_node, end=" ")

        for neighbor in self.graph[start_node]:
            if neighbor not in visited:
                self.dfs(neighbor, visited, preorder_list, postorder_list)
        
        postorder_list.append(start_node)  # Postorder action

        return preorder_list, postorder_list

    # BFS function
    def bfs(self, start_node):
        visited = set()
        queue = deque([start_node])
        visited.add(start_node)

        while queue:
            node = queue.popleft()
            print(node, end=" ")

            for neighbor in self.graph[node]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)

def main():
    g = Graph()

    while True:
        print("\nMenu:")
        print("1. Insert edge")
        print("2. Perform DFS (Preorder and Postorder)")
        print("3. Perform BFS")
        print("4. Exit")
        
        choice = input("Enter your choice (1-4): ")

        if choice == '1':
            u = int(input("Enter the first node: "))
            v = int(input("Enter the second node (connected to the first): "))
            g.add_edge(u, v)
            print(f"Edge added between node {u} and {v}")
        
        elif choice == '2':
            start_node = int(input("Enter the starting node for DFS: "))
            print("DFS Traversal (Preorder):")
            preorder_list, postorder_list = g.dfs(start_node)
            print(f"\nPreorder Traversal: {preorder_list}")
            print(f"Postorder Traversal: {postorder_list}")
        
        elif choice == '3':
            start_node = int(input("Enter the starting node for BFS: "))
            print("BFS Traversal:")
            g.bfs(start_node)
            print()  # New line after traversal

        elif choice == '4':
            print("Exiting the program.")
            break

        else:
            print("Invalid choice! Please select a valid option.")

if __name__ == "__main__":
    main()
